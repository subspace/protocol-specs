"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[824],{508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var c=n(7624),l=n(2172);const i={title:"Private EVM",hide_title:!1,sidebar_position:8,description:"Subspace private Ethereum runtimes",keywords:["runtime","evm","ethereum"],last_update:{date:"01/28/2025",author:"Teor"}},a=void 0,r={id:"decex/private_evm",title:"Private EVM",description:"Subspace private Ethereum runtimes",source:"@site/docs/decex/private_evm.md",sourceDirName:"decex",slug:"/decex/private_evm",permalink:"/protocol-specs/docs/decex/private_evm",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Private EVM",hide_title:!1,sidebar_position:8,description:"Subspace private Ethereum runtimes",keywords:["runtime","evm","ethereum"],last_update:{date:"01/28/2025",author:"Teor"}},sidebar:"tutorialSidebar",previous:{title:"Cross-Domain Messaging (XDM)",permalink:"/protocol-specs/docs/decex/xdm"},next:{title:"Fees and Rewards",permalink:"/protocol-specs/docs/category/fees-and-rewards"}},s={},o=[{value:"Core Functionality",id:"core-functionality",level:2},{value:"Pallets",id:"pallets",level:2},{value:"Global Parameters",id:"global-parameters",level:2},{value:"Runtime Instance Parameters",id:"runtime-instance-parameters",level:2},{value:"Pallet Calls",id:"pallet-calls",level:2},{value:"set_contract_creation_allowed_by",id:"set_contract_creation_allowed_by",level:3},{value:"Pallet Storage Items",id:"pallet-storage-items",level:2},{value:"AccountNonce",id:"accountnonce",level:3},{value:"ContractCreationAllowedBy",id:"contractcreationallowedby",level:3}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,l.M)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.p,{children:'A "private" EVM instance uses an allow list to limit which users can create contracts.\nAfter contract deployment, any user can call existing contracts.'}),"\n",(0,c.jsx)(t.h2,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,c.jsx)(t.p,{children:"The pallet filters contract creation calls based on an Ethereum account ID allow list:"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"pallet-ethereum"})," calls are filtered by the signer of the self-contained call. This includes ",(0,c.jsx)(t.code,{children:"Legacy"}),", ",(0,c.jsx)(t.code,{children:"EIP1559"}),", and ",(0,c.jsx)(t.code,{children:"EIP2930"})," transactions."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"pallet-evm"})," calls are filtered by the signer of the runtime call, which is typically the domain owner. This includes ",(0,c.jsx)(t.code,{children:"create"})," and ",(0,c.jsx)(t.code,{children:"create2"})," calls. If unsigned contract creation calls are permitted by other runtime settings, they are only allowed if the allow list is set to ",(0,c.jsx)(t.code,{children:"Anyone"}),". The ",(0,c.jsx)(t.code,{children:"source"})," field inside the transaction is ignored."]}),"\n"]}),"\n",(0,c.jsxs)(t.p,{children:["Contract calls nested within ",(0,c.jsx)(t.code,{children:"pallet-utility"})," calls  are allowed or rejected accurately, regardless of their nesting depth. (Nested transactions use some temporary memory, but don't use stack-based recursion.)"]}),"\n",(0,c.jsxs)(t.p,{children:["Rejected transactions have a custom error code ",(0,c.jsx)(t.code,{children:"ERR_CONTRACT_CREATION_NOT_ALLOWED"}),"."]}),"\n",(0,c.jsx)(t.h2,{id:"pallets",children:"Pallets"}),"\n",(0,c.jsx)(t.p,{children:"The private EVM functionality is implemented via a runtime pallet:"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"EVMNoncetracker"}),": A custom pallet used to track EVM nonces, and the EVM contract creation allow list. The crate is called ",(0,c.jsx)(t.code,{children:"pallet-evm-tracker"}),", but existing runtimes keep the ",(0,c.jsx)(t.code,{children:"EVMNoncetracker"})," name to preserve their storage."]}),"\n"]}),"\n",(0,c.jsx)(t.p,{children:"This pallet depends on some upstream pallets:"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Utility"}),": A pallet allowing calls to be batched or wrapped inside other calls. (Its other low-level functionality is not used by ",(0,c.jsx)(t.code,{children:"pallet-evm-tracker"}),".)"]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Ethereum"}),": Ethereum-compatible transactions."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"EVM"}),": An EVM hosted on Substrate, using a Substrate-specific transaction format."]}),"\n"]}),"\n",(0,c.jsx)(t.h2,{id:"global-parameters",children:"Global Parameters"}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"None"})}),"\n",(0,c.jsx)(t.h2,{id:"runtime-instance-parameters",children:"Runtime Instance Parameters"}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"DomainConfig"})," can be used to configure the initial contract creation allow list. The relevant parameter is:"]}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.code,{children:"DomainConfig"})}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"domain_runtime_config"}),": configurations that are specific to each domain type:","\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Evm"}),":","\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"initial_contract_creation_allow_list"}),": The accounts that are initially allowed to create contracts on this EVM domain."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(t.p,{children:"If no list is configured, the default configuration allows anyone to create Ethereum contracts."}),"\n",(0,c.jsx)(t.h2,{id:"pallet-calls",children:"Pallet Calls"}),"\n",(0,c.jsx)(t.p,{children:"Listed in the order of call index in the pallet."}),"\n",(0,c.jsx)(t.h3,{id:"set_contract_creation_allowed_by",children:"set_contract_creation_allowed_by"}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.code,{children:"set_contract_creation_allowed_by(contract_creation_allowed_by)"})}),"\n",(0,c.jsx)(t.p,{children:"The domain owner can replace the current contract creation allow list with a new list. This list applies to future contract creation transactions.\nExisting contracts remain deployed, even if they were created by accounts that are no longer in the allow list."}),"\n",(0,c.jsx)(t.h2,{id:"pallet-storage-items",children:"Pallet Storage Items"}),"\n",(0,c.jsx)(t.h3,{id:"accountnonce",children:"AccountNonce"}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"AccountNonce"})," is used to track Ethereum account nonces. (It is not used in implementing Private EVM.)"]}),"\n",(0,c.jsx)(t.h3,{id:"contractcreationallowedby",children:"ContractCreationAllowedBy"}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"ContractCreationAllowedBy"})," is a list of accounts that are allowed to create contracts."]}),"\n",(0,c.jsx)(t.p,{children:"It has two variants:"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Anyone"}),": any account can create signed contracts, and unsigned contract creation is allowed."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Accounts(list)"}),": a list of Ethereum Account IDs that can create contracts. If the list is empty, all contract creation transactions are rejected."]}),"\n"]}),"\n",(0,c.jsx)(t.p,{children:"If no list has been set, anyone is allowed to create contracts by default."})]})}function h(e={}){const{wrapper:t}={...(0,l.M)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>r,M:()=>a});var c=n(1504);const l={},i=c.createContext(l);function a(e){const t=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),c.createElement(i.Provider,{value:t},e.children)}}}]);